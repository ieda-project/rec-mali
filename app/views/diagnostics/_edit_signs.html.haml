- lol = ->(cl) { "#{cl.id} - #{cl.name}" }
- count, autos = 0, []
- for i in Illness.order(:sequence) do
  - cs = i.classifications.for_child(@diagnostic)
  - next if cs.empty?
  %section.illness{'data-classify-href' => classification_illness_path(i), 'data-key' => i.key, 'data-age-group' => cs.first.age_group}
    %h2
      = i.name
      - my_cs = @diagnostic.classifications.for(i).hashize &:id
      %ul.classification
        - for c in cs do
          %li{:class => (my_cs[c.id].present?).inspect}= c.name
    %table
      - form.object.sign_answers.for(i).sort.each do |answer|
        - autos << answer.sign if answer.sign.auto.present?
        = form.fields_for "sign_answers][#{count}", answer do |fields|
          %tr{class: answer.errors.any? ? 'has-errors' : ''}
            %th(scope="row")
              .question!= answer.sign.question
              = fields.hidden_field :sign_id
            %td.answer{id: answer.sign.full_key}
              = partial "diagnostics/sign_#{answer.sign.kind}", locals: { sign: answer.sign, form: fields }
        - count += 1
    .next
      %button.next(type="button") Continuer

%script
  auto_answer = {
  != autos.map { |a| %Q|  "#{a.full_key}": #{a.auto_js}| }.join(",\n")
  };
